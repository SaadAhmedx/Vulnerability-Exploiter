# !/usr/bin/env python

# == Vulnerability Exploiter v1.0

# This tool is used to mass check the following vulnerabilities  

# 	=> Server Info 
# 	=> WordPress CMS
# 	=> S3 Bucket
# 	=> Open Redirection
# 	=> Miss Configure CORS
#       => Alias Checker
# 	=> Host Header Injection
# 	=> SSLv3 Poodle

# For more information on how this Tool works checkout the video demonstration at

# 	=> https://www.youtube.com/watch?v=TdK3xro1yZc
 
# == Usage

# Note this script is written on python 3x version

# python3 vuln3xp.py -l < Filename >	

# -l, --list < filename >:
# 	:: filename containing targets

# -h, --help:
# 	:: show help

# < Filename > : The List Of Targets To Start Exploiting

# Author :: SaadAhmed aka InjectorPCA (https://facebook.com/InjectorPCA) / (https://github.com/SaadAhmedx)
# Copyright :: Copyright (c) SaadAhmed 2017

import os
import requests
import argparse
import re
import subprocess
from bs4 import BeautifulSoup
from urllib.parse import urlparse

parser = argparse.ArgumentParser(description="Vulnerability Exploiter v1.0")

parser.add_argument(
	'-l',
	'--list',
	default='',
	help='python3 3xpme.py [-l, --list] list of domains'
)

args = parser.parse_args()

domainList = args.list

print("""
+----------------------------------------------------------------+
|888-----888----------888-----------.d8888b.---------------------| 
|888-----888----------888----------d88P--Y88b--------------------| 
|888-----888----------888--------------.d88P---------------------|
|Y88b---d88P-888--888-888-88888b.------8888"-888--88--888888b.---|
|-Y88b-d88P--888--888-888-888-"88b------"Y8b.`Y8bd8P'--888-"88b--|
|--Y88o88P---888--888-888-888--888-888----888--X88K----888--888--|
|---Y888P----Y88b-888-888-888--888-Y88b--d88P.d8""8b.--888-d88P--|
|----Y8P------"Y88888-888-888--888--"Y8888P"-888---88-888888P"---|
|------------------------------------------------------888-------| 
|------------------------------------------------------888-------| 
|------------------------------------------------------888-------| 
|-------------------------------------------------- Version v1.0 |
|------------------------------- By Saad Ahmed a.k.a InjectorPCA |
+----------------------------------------------------------------+
""")
RED = "\033[1;31m"
GREEN = "\033[1;32;0m"
OKBLUE = "\033[94m"
WHITE = "\033[0;37m"


if len(str(domainList)) > 0:
	if os.path.isfile(domainList):
		readWords = open(domainList, 'r')

	print(WHITE,"\n[+] Loading Targets.... [+]\033[94m\n")	

	subList = []	
	for words in readWords:
		if not words.isspace():
			words = words.rstrip()
			words = words.replace("https://", "")
			words = words.replace("http://", "")
			words = words.replace("https://www.", "")
			words = words.replace("http://www.", "")
			words = words.replace("/", "")
			words = "https://{}".format(words)
			
			try:
				requests.get("{}".format(words.rstrip()))

			except (ConnectionError, requests.exceptions.ConnectionError):
				print(RED,"!! ConnectionError => {}\033[94m".format(words.rstrip()))

			else:
				print("-- Adding {}".format(words.rstrip()))
				subList.append(words)

	print(WHITE,"\n[!] Total {} Targets Loaded [!]\033[94m".format(len(subList)))
	print("{}[!] Exploiting Started..... [!]\n\033[94m".format(WHITE))		

	if not os.path.isdir("vulnExploiter"):
		os.system("mkdir vulnExploiter")

	headers = requests.utils.default_headers()
	headers.update({
		'User-Agent': 'My User Agent 1.0',
	})

	hrefs =     []
	temp =      []
	subdomain = []

	for domains in subList:
		domains = domains.rstrip()
		req = requests.get(domains, headers=headers).text
		soup = BeautifulSoup(req, 'html.parser')

		for href1 in soup.find_all('a'):
			href1 = href1.get('href')
			href1 = str(href1)

			if not href1 in temp and not href1 == "/" and not href1 == "None" and not href1 == "#" and not href1 == "mailto":
				temp.append(href1)

		for link in temp:
			if link[:4] == "http":
				n = domains.replace("https://", "")
				n = n.replace("https://www.", "")
				n = n.replace("http://", "")
				n = n.replace("http//www.", "")
				n = n.replace("/", "")
				rep1 = re.findall(r'www.{}'.format(n), link)
				rep = re.findall(r'.{}'.format(n), link)
				
				if not rep1 and rep and link not in subdomain and not link in hrefs:
					subdomain.append(link)
					hrefs.append(link)
					
			else:
				n = domains.replace("https://", "")
				n = n.replace("https://www.", "")
				n = n.replace("http://", "")
				n = n.replace("http//www.", "")
				n = n.replace("/", "")

				cond = link.replace(n, '')
				if cond:
					link = str(link)

					if link[:2] == "//":
						link = "http:{}".format(link)
						hrefs.append(link)

					elif link[:1] == "/":
						link = "{}{}".format(domains, link)
						hrefs.append(link)

	print(WHITE,"\n[+] Server Info [+]\n\033[94m")
	
	serverPOC = open("vulnExploiter/serverInfo.txt", "a")

	for domains in subList:
		get = requests.get(domains.rstrip())
		headers = get.headers

		for key, value in headers.items():
			if key.title() == "Server":
				print(GREEN,"  ==> {} => {}: [ {} ]\033[94;m".format(domains.rstrip(), key.title(), value))
				serverPOC.write("==> {} => {}: [ {} ]\n".format(domains.rstrip(), key.title(), value))				

	print(WHITE,"\n[+] Searching For Wordpress CMS [+]\033[94m\n")

	wpPOC = open("vulnExploiter/Wordpress.txt", 'a')

	headers = requests.utils.default_headers()
	headers.update({
		'User-Agent': 'My User Agent 1.0',
	})

	for domains in subList:
		source = requests.get(domains.rstrip(), headers=headers)
		sourceCode = source.content
		
		try:
			str(sourceCode,'utf-8')
		
		except UnicodeDecodeError:
			pass

		else:
			decodeSource = str(sourceCode, 'utf-8')	
			wp1 = re.search(r'xmlrpc.php', decodeSource)
			wp2 = re.search(r'wp-content', decodeSource)
			wp3 = re.search(r'wp-includes', decodeSource)

			if wp1 and wp2 and wp3:
				print(GREEN,"  ==> Wordpress Found {}\033[94m".format(domains.rstrip()))
				wpPOC.write("==> Wordpress Found {}\n".format(domains.rstrip()))

			else:
				print("Not Wordpress => {}".format(domains.rstrip()))	

	print(WHITE,"\n[+] Searching For S3 Buckets [+]\033[94m\n")

	foundBucket = []
	bucketResult = []
	s3Poc = open("vulnExploiter/s3bucket.txt", 'a')
	s3Poc.write("{}\nBucket Found From These Urls\n{}\n\n".format("=" * 30, "=" * 30))

	if len(hrefs) > 0:
		print(WHITE,"  [-] Grabed Total {} Links [-]".format(len(hrefs)))
		print("   [-] Please Wait This Might Take Time.... [-]\033[94m\n")				
	
	for href in hrefs:
		if not href[:4] == "http":
			href = "https://{}".format(href)
		
		try:
			requests.get(href, headers=headers, allow_redirects=False)

		except (requests.exceptions.InvalidURL, requests.exceptions.ConnectionError):
			pass

		else:			

			lSource = requests.get(href, headers=headers, allow_redirects=False)
			lSourceCode = lSource.content
			try:
				str(lSourceCode, 'utf-8')

			except UnicodeDecodeError:		
				pass

			else:	
				lDecodeSource = str(lSourceCode, 'utf-8')

				secWord = re.findall(r'([^"'=:;(>\s@]+)s3.amazonaws.com([^;?<"')\s@]+)', lDecodeSource)

				if secWord:
					
					bucket = ''
					counter = 1
					for i in secWord:
						for x in i:
							bucket += x
							if counter == 1:
								bucket += "s3.amazonaws.com"

							counter += 1
						counter = 1

						if bucket not in foundBucket:
							foundBucket.append(bucket)	
						
						if href not in bucketResult and len(foundBucket) > 0:
							bucketResult.append(href)
							s3Poc.write("{}\n{}\n".format("=" * 100, href))	
							
						bucket = ''

				else:
					print("Not Found From => {}".format(href))					
	
	s3Poc.write("{}\n\n".format("=" * 100))

	for listBucket in foundBucket:
		if listBucket[:4] == "http":
			print(GREEN,"  ==> {}\033[94m".format(listBucket))
			s3Poc.write("==> {}\n".format(listBucket))

		else:
			print(GREEN,"  ==> http:{}\033[94m".format(listBucket))
			s3Poc.write("==> http:{}\n".format(listBucket))			

	print(WHITE,"\n[+] Searching For Open Redirection [+]\033[94m\n")

	openPOC = open("vulnExploiter/openRedirect.txt", 'a') 
	try:
		payload = open('openPayload.txt', 'r')
	
	except FileNotFoundError:
		print("{}THE >> openPayload.txt << NOT FOUND OPEN REDIRECTION IS SKIPPED!!!!\033[94m".format(RED))
	
	else:
		openPayload = []
		for pay in payload:
			if not words.isspace():
				openPayload.append(pay)
	
		for domains in subList:
			domains = domains.rstrip()
			domains = domains.replace("https://", "")
			domains = domains.replace("http://", "")
			domains = domains.replace("https://www.", "")
			domains = domains.replace("http://www.", "")
			domains = list(domains)

			if domains[-1] == "/":
				del domains[-1]
				domains = "".join(domains)
				domains = str(domains)
			
			domains = "".join(domains)

			for bypass in openPayload:	
				bypass = bypass.rstrip()
				target = "http://{}/{}".format(domains, bypass)

				try:
					requests.get(target)
				
				except requests.exceptions.SSLError:
					response = requests.get(target)
					hostname = response.url
					if hostname[:14] == "https://google" or hostname[:18] == "https://www.google" or hostname[:13] == "http://google" or hostname[:17] == "http://www.google":
						print(GREEN,"  ==> Open Redirection Found => {}\033[94m".format(target))
						openPOC.write("==> Open Redirection Found => {}\n".format(target))

					else:
						print("Not Vulnerable => {}{}".format(domains.rstrip(), bypass))	

				else:
					response = requests.get(target)	
					hostname = response.url
					if hostname[:14] == "https://google" or hostname[:18] == "https://www.google" or hostname[:13] == "http://google" or hostname[:17] == "http://www.google":
						print(GREEN,"  ==> Open Redirection Found => {}\033[94m".format(target))
						openPOC.write("==> Open Redirection Found => {}\n".format(target))

					else:
						print("Not Vulnerable => {}{}".format(domains.rstrip(), bypass))

	print(WHITE,"\n[+] Searching For Misconfigured CORS (Cross Origin Resource Sharing) [+]\033[94m\n")

	corsPoc = open("vulnExploiter/misConfCors.txt", 'a')		    	
	corsPoc.write("{}\nPOC <> curl victim.com -H 'Origin: https://attacker.com' -I\n{}\n\n".format("=" * 62, "=" * 62))

	for domains in hrefs: 	
		command = "curl {} -H 'Origin: https://attacker.com' -I".format(domains.rstrip())
		try:
			cdomainsResult = subprocess.check_output(command, shell=True, stderr=subprocess.PIPE)
		
		except subprocess.CalledProcessError:
			pass

		else:
			cond1 = re.search(r'Access-Control-Allow-Credentials: true', str(cdomainsResult))
			cond2 = re.search(r'Access-Control-Allow-Origin: https://attacker.com', str(cdomainsResult))
			cond3 = re.search(r'Access-Control-Allow-Origin: null', str(cdomainsResult))

			if cond1 and cond2:
				print(GREEN,"  ==> Misconfigured CORS Found <> Exploitable => {}\033[94m".format(domains.rstrip()))
				corsPoc.write("==> Misconfigured CORS Found <> Exploitable => {}\n".format(domains.rstrip()))

			elif cond1 and cond3:
				print(GREEN,"  ==> Misconfigured CORS Found <> Exploitable => {}\033[94m".format(domains.rstrip()))
				corsPoc.write("==> Misconfigured CORS Found <> Exploitable => {}\n".format(domains.rstrip()))

			else:
				print("Not Vulnerable => {}".format(domains.rstrip()))

	print(WHITE,"\n[+] Checking For Cname [+]\033[94m\n")

	cnamePoc = open("vulnExploiter/Alias.txt", "a")		

	for domains in subList:
		domains = domains.rstrip()
		domains = domains.replace("https://", "")
		domains = domains.replace("http://", "")
		domains = domains.replace("https://www.", "")
		domains = domains.replace("http://www.", "")
		domains = domains.replace("/", "")
		cmd  = "dig {}".format(domains)
		try:
			result = subprocess.check_output(cmd, shell=True)
		
		except subprocess.CalledProcessError:
			pass

		else:		
			result = result.strip()
			cname = re.findall(r'ANSWER SECTION:([^;]+)', str(result))
			
			if cname:
				cname = "".join(cname)
				cname = cname.replace("\\n", "\n\t")
				cname = cname.replace("\\t", "\t")
				print(OKBLUE,"{}\t{}\033[94;m".format(domains, cname))		
				cnamePoc.write("{}\t{}\n".format(domains, cname))

	print(WHITE,"\n[+] Searching For Host Header Injection [+]\033[94m\n")

	hostPoc = open("vulnExploiter/hostHeader.txt", "a")
	hostPoc.write("{}\ncurl -i -s -k  -X 'POST'     -H 'Host: google.com' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0' -H 'DNT: 1' -H 'Referer: https://google.com' -H 'cookie: <SESSION>;' -H 'Upgrade-Insecure-Requests: 1' -H 'Content-Type: application/x-www-form-urlencoded' example.com\n{}\n\n".format("=" * 147, "=" * 147))
	subhrefs = []

	for href in hrefs:

		c = "curl -i -s -k  -X 'POST'     -H 'Host: google.com' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0' -H 'DNT: 1' -H 'Referer: https://google.com' -H 'cookie: <SESSION>;' -H 'Upgrade-Insecure-Requests: 1' -H 'Content-Type: application/x-www-form-urlencoded' {}".format(href)
		
		try:
			subprocess.check_output(c, shell=True)
		
		except subprocess.CalledProcessError:
			pass

		else:
			cmd = subprocess.check_output(c, shell=True)	
			hHeader1 = re.search(r'Location: https://www.google.com', str(cmd))
			hHeader2 = re.search(r'Location: https://.google.com', str(cmd))
			hHeader3 = re.search(r'Location: http://www.google.com', str(cmd))
			hHeader4 = re.search(r'Location: http://.google.com', str(cmd))
			
			if hHeader1 or hHeader2 or hHeader3 or hHeader4:
				print(GREEN,"  ==> Host Header Injection Found => {}\033[94m".format(href))
				hostPoc.write("==> Host Header Injection Found => {}\n".format(href))

			else:
				print("Not Vulnerable => {}".format(href))							

	print(WHITE,"\n[+] Searching For sslv3 Poodle [+]\033[94m\n")	

	sslPOC = open('vulnExploiter/sslv3.txt', 'a')
	sslPOC.write("{}\nPOC <> nmap -sV --version-light --script ssl-poodle -p 443 example.com\n{}\n\n".format("=" * 71, "=" * 71))

	for domains in subList:
		domains = domains.rstrip()
		domains = domains.replace("https://", "")
		domains = domains.replace("http://", "")
		domains = domains.replace("https://www.", "")
		domains = domains.replace("http://www.", "")
		domains = domains.replace("/", "")
		ssl = "nmap -sV --version-light --script ssl-poodle -p 443 {}".format(domains.rstrip())
		sslR = subprocess.check_output(ssl, shell=True)
		sslR = sslR.strip()
		sslv3 = re.findall(r'State:([^\n]+)', str(sslR))
		sslv3 = "".join(sslv3)
		sslVuln = sslv3.replace("VULNERABLE", "yo")
		if sslVuln:
			print(GREEN,"  ==> Sslv3 Poodle Found => {}\033[94m".format(domains.rstrip()))
			sslPOC.write("==> Sslv3 Poodle Found => {}\n".format(domains.rstrip()))

		else:
			print("Not Vulnerable => {}".format(domains.rstrip()))		

	print("\n")

else:
	print("\nVulnerability Exploiter v1.0\nAuthor: SaadAhmed a.k.a InjectorPCA\nContact: http://facebook/InjectorPCA\n\n\t--help, -h: Show Help\n\t--list, -l: list of domains\n")   	
